<?php
declare(strict_types=1);

namespace dev\winterframework\pdbc;

use DateTimeInterface;
use dev\winterframework\pdbc\core\BindVar;
use dev\winterframework\pdbc\core\BindVars;
use dev\winterframework\pdbc\core\OutBindVar;
use dev\winterframework\pdbc\core\OutBindVars;
use dev\winterframework\pdbc\types\Blob;
use dev\winterframework\pdbc\types\Clob;

interface PreparedStatement {
    public function clearParameters(): void;

    public function execute(): bool;

    public function executeQuery(): ResultSet;

    public function executeUpdate(): int;

    /**
     * --------------------------
     * Getters
     */
    public function getResultSet(): ?ResultSet;

    public function getGeneratedKeys(): array;

    /**
     * ---------------------
     * Bind variable setters
     *
     * @param string|int $bind
     * @param bool $value
     */
    public function setBoolean(string|int $bind, bool $value): void;

    public function setInt(string|int $bind, int $value): void;

    public function setFloat(string|int $bind, float $value): void;

    public function setNull(string|int $bind, int $sqlType = null): void;

    public function setString(string|int $bind, string $value): void;

    public function setDate(string|int $bind, string|int|DateTimeInterface $value): void;

    public function setBlob(string|int $bind, Blob $value): void;

    public function setClob(string|int $bind, Clob $value): void;

    public function bindValue(string|int $bind, mixed $value): void;

    public function bindVar(BindVar $bindVar): void;

    public function bindVars(BindVars $bindVars): void;

    public function outBindVar(OutBindVar $bindVar): void;

    public function outBindVars(OutBindVars $bindVars): void;

    public function getOutValues(): array;

    /**
     * Default methods
     */
    public function getConnection(): Connection;

    /**
     * Close the statement
     */
    public function close(): void;

    public function isClosed(): bool;

    public function closeOnCompletion(bool $closeOnCompletion): void;

    public function isCloseOnCompletion(): bool;

    /**
     * Cursor related
     */
    public function getQueryTimeout(): int;

    public function setQueryTimeout(int $queryTimeout): void;

    public function setCursorName(string $cursor): void;

    public function getResultSetType(): int;

    public function setFetchDirection(int $fetchDirection): void;

    public function getFetchDirection(): int;

    /**
     * Gives the PDBC driver a hint as to the number of rows that should be
     * fetched from the database when more rows are needed for ResultSet
     * objects generated by this Statement.
     * @param int $fetchSize
     */
    public function setFetchSize(int $fetchSize): void;

    public function getFetchSize(): int;

    /**
     * Sets the limit for the maximum number of rows that any ResultSet object
     * generated by this Statement object can contain to the given number.
     * @param int $max
     */
    public function setMaxRows(int $max): void;

    public function getMaxRows(): int;


}
