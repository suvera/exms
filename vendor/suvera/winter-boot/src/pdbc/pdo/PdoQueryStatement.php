<?php
declare(strict_types=1);

namespace dev\winterframework\pdbc\pdo;

use dev\winterframework\pdbc\support\AbstractStatement;
use PDO;
use PDOStatement;

class PdoQueryStatement extends AbstractStatement {
    private ?PDOStatement $stmt = null;
    private ?PdoResultSet $resultSet = null;
    private array $generatedKeys = [];

    public function __construct(
        protected PdoConnection $connection
    ) {
        parent::__construct();
    }

    public function getStatement(): ?PDOStatement {
        return $this->stmt;
    }

    public function getConnection(): PdoConnection {
        return $this->connection;
    }

    public function close(): void {
        if (isset($this->stmt)) {
            $this->stmt->closeCursor();
        }
        $this->stmt = null;
        $this->reset();
    }

    private function reset(): void {
        $this->stmt = null;
        $this->resultSet = null;
        $this->generatedKeys = [];
    }

    public function isClosed(): bool {
        return !isset($this->stmt);
    }

    public function executeQuery(string $sql): PdoResultSet {
        $this->stmt = $this->connection->getPdo()->query($sql);
        $this->resultSet = new PdoResultSet($this, $this->cursorName);
        $this->generatedKeys = [];
        return $this->resultSet;
    }

    public function execute(
        string $sql,
        int $autoGeneratedKeys = self::NO_GENERATED_KEYS,
        array $columnIdxOrNames = []
    ): bool {
        $this->reset();
        $pdo = $this->connection->getPdo();
        $this->stmt = $pdo->query($sql);
        if ($autoGeneratedKeys == self::RETURN_GENERATED_KEYS) {
            $this->loadAutoGeneratedKeys($pdo, $columnIdxOrNames);
        }
        $this->resultSet = new PdoResultSet($this, $this->cursorName);
        return true;
    }

    public function executeUpdate(
        string $sql,
        int $autoGeneratedKeys = self::NO_GENERATED_KEYS,
        array $columnIdxOrNames = []
    ): int {
        $this->reset();
        $pdo = $this->connection->getPdo();
        $count = $pdo->exec($sql);
        if ($autoGeneratedKeys == self::RETURN_GENERATED_KEYS) {
            $this->loadAutoGeneratedKeys($pdo, $columnIdxOrNames);
        }
        return $count;
    }

    private function loadAutoGeneratedKeys(PDO $pdo, array $columnIdxOrNames): void {
        if (empty($columnIdxOrNames)) {
            $this->generatedKeys[] = $pdo->lastInsertId();
        } else {
            foreach ($columnIdxOrNames as $name) {
                if (is_int($name)) {
                    $this->generatedKeys[] = $pdo->lastInsertId();
                } else {
                    $this->generatedKeys[] = $pdo->lastInsertId($name);
                }
            }
        }
    }

    public function executeBatch(): array {
        $ret = [];

        foreach ($this->sqlBatch as $sql) {
            $pdo = $this->connection->getPdo();
            $ret[] = $pdo->exec($sql);
        }

        return $ret;
    }

    public function getResultSet(): ?PdoResultSet {
        return $this->resultSet;
    }

    public function getGeneratedKeys(): array {
        return $this->generatedKeys;
    }


}