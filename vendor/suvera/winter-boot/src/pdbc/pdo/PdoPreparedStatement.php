<?php
declare(strict_types=1);

namespace dev\winterframework\pdbc\pdo;

use DateTime;
use dev\winterframework\pdbc\core\BindType;
use dev\winterframework\pdbc\core\BindVar;
use dev\winterframework\pdbc\core\OutBindVar;
use dev\winterframework\pdbc\ResultSet;
use dev\winterframework\pdbc\support\AbstractPreparedStatement;
use PDO;
use PDOStatement;

class PdoPreparedStatement extends AbstractPreparedStatement {
    protected ?PDOStatement $stmt;
    protected ?PdoResultSet $resultSet = null;
    protected array $generatedKeys = [];
    private array $tmpValues = [];

    public function __construct(
        protected PdoConnection $connection,
        protected string $sql,
        protected array $options = []
    ) {
        $this->stmt = $this->connection->getPdo()->prepare($this->sql, $this->options);
        parent::__construct();
    }

    public function getStatement(): PDOStatement {
        return $this->stmt;
    }

    public function getConnection(): PdoConnection {
        return $this->connection;
    }

    public function close(): void {
        if (isset($this->stmt)) {
            $this->stmt->closeCursor();
        }
        $this->stmt = null;
        $this->reset();
    }

    private function reset(): void {
        $this->resultSet = null;
        $this->generatedKeys = [];
    }

    public function isClosed(): bool {
        return !isset($this->stmt);
    }

    public function executeQuery(): ResultSet {
        if ($this->doExecute()) {
            $this->resultSet = new PdoResultSet($this, $this->cursorName);
        } else {
            $this->resultSet = null;
        }
        $this->generatedKeys = [];
        return $this->resultSet;
    }

    public function execute(): bool {
        $this->reset();
        $pdo = $this->connection->getPdo();
        if ($this->doExecute()) {
            $this->loadAutoGeneratedKeys($pdo);
            $this->resultSet = new PdoResultSet($this, $this->cursorName);
            return true;
        }
        return false;
    }

    public function executeUpdate(): int {
        $this->reset();
        $pdo = $this->connection->getPdo();
        $count = 0;
        if ($this->doExecute()) {
            $count = $this->stmt->rowCount();
        }
        $this->loadAutoGeneratedKeys($pdo);
        return $count;
    }

    protected function doExecute(): bool {
        $this->tmpValues = [];
        $this->bindInParameters();
        $this->bindOutParameters();

        $ret = $this->stmt->execute();
        $this->tmpValues = [];
        return $ret;
    }

    protected function bindInParameters(): void {
        foreach ($this->parameters as $bindKey => $bindVar) {
            /** @var BindVar $bindVar */

            switch ($bindVar->getType()) {
                case BindType::BOOL:
                    if (is_null($bindVar->value)) {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    } else {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_BOOL);
                    }
                    break;

                case BindType::NULL:
                    $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    break;

                case BindType::INTEGER:
                case BindType::FLOAT:
                    if (is_null($bindVar->value)) {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    } else {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_INT);
                    }
                    break;

                case BindType::BLOB:
                    if (is_null($bindVar->value)) {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    } else {
                        $tmpRow = count($this->tmpValues);
                        $this->tmpValues[] = $bindVar->value->getStreamResource();
                        $this->stmt->bindParam($bindKey, $this->tmpValues[$tmpRow], PDO::PARAM_LOB);
                    }

                    break;

                case BindType::CLOB:
                    if (is_null($bindVar->value)) {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    } else {
                        $driver = $this->connection->getDriverType();
                        $tmpRow = count($this->tmpValues);
                        if ($driver == 'oci') {
                            $this->tmpValues[] = $bindVar->value->getString();
                            $this->stmt->bindParam($bindKey, $this->tmpValues[$tmpRow],
                                PDO::PARAM_STR, strlen($this->tmpValues[$tmpRow]));
                        } else {
                            $this->tmpValues[] = $bindVar->value->getStreamResource();
                            $this->stmt->bindParam($bindKey, $this->tmpValues[$tmpRow], PDO::PARAM_LOB);
                        }
                    }
                    break;

                case BindType::DATE:
                    /** @var DateTime $dateVal */
                    $dateVal = $bindVar->value;
                    if (!is_null($dateVal)) {
                        $tmpRow = count($this->tmpValues);
                        $this->tmpValues[] = $dateVal->format('Y-m-d H:i:s');
                        $this->stmt->bindParam($bindKey, $this->tmpValues[$tmpRow]);
                    } else {
                        $this->stmt->bindParam($bindKey, $bindVar->value);
                    }
                    break;

                default:
                    if (is_null($bindVar->value)) {
                        $this->stmt->bindParam($bindKey, $bindVar->value, PDO::PARAM_NULL);
                    } else {
                        $this->stmt->bindParam($bindKey, $bindVar->value,
                            PDO::PARAM_STR, strlen($bindVar->value));
                    }
                    break;
            }
        }
    }

    protected function bindOutParameters(): void {
        $this->outValues = [];

        foreach ($this->outParameters as $bindKey => $bindVar) {
            /** @var OutBindVar $bindVar */
            $this->outValues[$bindKey] = null;

            $maxLen = $bindVar->getMaxLength();
            switch ($bindVar->getType()) {
                case BindType::BOOL:
                    $maxLen = ($maxLen < 1) ? 10 : $maxLen;
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        PDO::PARAM_BOOL | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;

                case BindType::NULL:
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        PDO::PARAM_NULL | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;

                case BindType::INTEGER:
                case BindType::FLOAT:
                    $maxLen = ($maxLen < 1) ? 64 : $maxLen;
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        PDO::PARAM_INT | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;

                case BindType::BLOB:
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        PDO::PARAM_LOB | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;

                case BindType::CLOB:
                    $driver = $this->connection->getDriverType();
                    if ($driver == 'oci') {
                        $type = PDO::PARAM_STR;
                    } else {
                        $type = PDO::PARAM_LOB;
                    }
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        $type | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;

                default:
                    $this->stmt->bindParam(
                        $bindKey,
                        $this->outValues[$bindKey],
                        PDO::PARAM_STR | PDO::PARAM_INPUT_OUTPUT,
                        $maxLen
                    );
                    break;
            }
        }
    }

    /** @noinspection PhpSameParameterValueInspection */
    private function loadAutoGeneratedKeys(PDO $pdo, array $columnIdxOrNames = []): void {
        if (empty($columnIdxOrNames)) {
            $this->generatedKeys[] = $pdo->lastInsertId();
        } else {
            foreach ($columnIdxOrNames as $name) {
                if (is_int($name)) {
                    $this->generatedKeys[] = $pdo->lastInsertId();
                } else {
                    $this->generatedKeys[] = $pdo->lastInsertId($name);
                }
            }
        }
    }

    public function getResultSet(): ?PdoResultSet {
        return $this->resultSet;
    }

    public function getGeneratedKeys(): array {
        return $this->generatedKeys;
    }

}